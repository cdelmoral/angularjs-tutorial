#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../src/app');
var express = require('express');
var path = require('path');
var debug = require('debug')('express-test:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

if (process.env.NODE_ENV === "production") {
    app.use(express.static(path.join(__dirname, '/../public')));
} else if (process.env.NODE_ENV === "development") {
    app.use('/bower_components', express.static(path.join(process.env.UI_PROJECT_PATH, '/bower_components')));
    app.use(express.static(path.join(process.env.UI_PROJECT_PATH, '/.dev')));
}

mongoose.connect(process.env.DB_URL, mongooseCallback);

function mongooseCallback(err) {
    if (err) {
        console.log('Database connection error', err);
    } else {
        if (process.env.NODE_ENV === "production") {
            mongoose.config.autoIndex = false;
        }
        
        console.log('Connection to database successful');
    }
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app).listen(port, function() {
    console.log('Express ' + process.env.NODE_ENV + ' server listening on port ' + port);
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
